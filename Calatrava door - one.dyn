<Workspace Version="0.7.6.4190" X="-27.4233439070202" Y="-262.54712402827" zoom="0.63444189812771" Name="Home">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Nodes.DSFunction guid="b71b2161-0719-4f03-be61-1e81b39f5aa8" type="Dynamo.Nodes.DSFunction" nickname="Line.ByStartPointDirectionLength" x="687.280923098821" y="275.426278761068" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Line.ByStartPointDirectionLength@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector,double">
      <PortInfo index="2" default="True" />
    </Dynamo.Nodes.DSFunction>
    <Dynamo.Nodes.DSFunction guid="f1fe0378-e55f-4398-8520-79a1ec0f7253" type="Dynamo.Nodes.DSFunction" nickname="Vector.YAxis" x="526.855844294325" y="305.430898553171" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Vector.YAxis" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="4882d76d-ef81-4207-89b1-931b58addd3a" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="464.115833379922" y="711.848111549386" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="80;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="9c6f27b2-c241-4762-b772-d2e90e90a36f" type="Dynamo.Nodes.DSFunction" nickname="Point.ByCoordinates" x="283.5" y="137" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Point.ByCoordinates@double,double,double">
      <PortInfo index="0" default="True" />
      <PortInfo index="1" default="True" />
      <PortInfo index="2" default="True" />
    </Dynamo.Nodes.DSFunction>
    <Dynamo.Nodes.CodeBlockNodeModel guid="ab1e4ca7-f2dc-4afc-845d-512ae4020de2" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="100" y="149" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="0;" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="a4dfe319-0c7f-4700-9eaa-67335116a0c4" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="2052.38716988406" y="1173.09048879809" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="0..1..0.02;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="e13cfe5b-57bb-4f99-a0ea-beb83b9a161e" type="Dynamo.Nodes.DSFunction" nickname="Geometry.Translate" x="1539.65442174575" y="1489.95763542316" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Geometry.Translate@Autodesk.DesignScript.Geometry.Vector,double" />
    <Dynamo.Nodes.DSFunction guid="e5c65d66-13bc-41ce-98e5-09e82e18c53b" type="Dynamo.Nodes.DSFunction" nickname="Vector.ZAxis" x="1359.07989594942" y="1521.72653831974" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Vector.ZAxis" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="54fb4448-cf6f-45f7-bb4f-2fec00117f7a" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="1372.60620375494" y="1608.71237717551" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="x/2.5;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="e17457dd-0965-4887-8a08-635170918e65" type="Dynamo.Nodes.DSFunction" nickname="Curve.PlaneAtParameter" x="2415.06649509174" y="1554.00914164587" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Curve.PlaneAtParameter@double">
      <PortInfo index="1" default="True" />
    </Dynamo.Nodes.DSFunction>
    <Dynamo.Nodes.DSFunction guid="ee7be14f-c3f4-4d71-84cb-034964f794b0" type="Dynamo.Nodes.DSFunction" nickname="Vector.ZAxis" x="1323.05331180176" y="1014.56665439481" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Vector.ZAxis" />
    <Dynamo.Nodes.DSFunction guid="094d7826-370a-4c00-aacf-f9ab6038275f" type="Dynamo.Nodes.DSFunction" nickname="Geometry.Translate" x="1503.62783759809" y="982.797751498231" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Geometry.Translate@Autodesk.DesignScript.Geometry.Vector,double" />
    <DSCoreNodesUI.Input.DoubleSlider guid="1a091f59-c8cd-4249-a369-3b6bb0cb3745" type="DSCoreNodesUI.Input.DoubleSlider" nickname="Number Slider" x="239.84577408553" y="802.666952135402" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double>20</System.Double>
      <Range min="0" max="20" step="0.01" />
    </DSCoreNodesUI.Input.DoubleSlider>
    <Dynamo.Nodes.DSFunction guid="a7d94cb0-11cf-455a-9818-02cb59c248f8" type="Dynamo.Nodes.DSFunction" nickname="Curve.PlaneAtParameter" x="2407.81674534157" y="791.694430728451" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Curve.PlaneAtParameter@double">
      <PortInfo index="1" default="True" />
    </Dynamo.Nodes.DSFunction>
    <Dynamo.Nodes.DSFunction guid="06e420ac-2424-4783-9953-844b88a05d93" type="Dynamo.Nodes.DSFunction" nickname="Arc.ByCenterPointRadiusAngle" x="4883.47427464953" y="798.673945337369" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Arc.ByCenterPointRadiusAngle@Autodesk.DesignScript.Geometry.Point,double,double,double,Autodesk.DesignScript.Geometry.Vector" />
    <Dynamo.Nodes.DSFunction guid="55b3b1bb-383d-4aff-820d-1d014764385e" type="Dynamo.Nodes.DSFunction" nickname="Vector.YAxis" x="4097.9386169723" y="1007.58146800072" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Vector.YAxis" />
    <Dynamo.Nodes.DSFunction guid="b7ddc790-a5f7-47e5-a3f7-72c40ee12441" type="Dynamo.Nodes.DSFunction" nickname="Plane.Origin" x="2650.70124584114" y="796.2680876154" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Plane.Origin" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="04561f3d-4d72-4a7b-97a9-3b4f9b5474a2" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="4273.45150621476" y="955.501091738162" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="100;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="3d04b955-0c3d-4210-acd8-07993a2f5b6b" type="Dynamo.Nodes.DSFunction" nickname="Plane.Origin" x="2679.22985828706" y="1562.49754692577" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Plane.Origin" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="c735c269-2433-49f8-b039-7631aa094880" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="4280.49511036603" y="871.886124219883" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="-90;" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="cb264f58-d454-4e71-b1bd-be618c4deb66" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="3744.98635092047" y="666.163251041252" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="-(Math.Sin(0..180..x)*p)+y;" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="fd6119c3-2c60-4a83-96e5-9b502efe95d9" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="3576.66949807417" y="666.2412965571" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="180/x;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="f3274b6d-1ce3-443b-b5a7-371c4c71151e" type="Dynamo.Nodes.DSFunction" nickname="Count" x="3411.64894389824" y="663.476295330786" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Count@var[]..[]" />
    <Dynamo.Nodes.DSFunction guid="98810b1a-7a63-4903-aa91-23654a8a7436" type="Dynamo.Nodes.DSFunction" nickname="Count" x="4096.51062240672" y="676.138697122333" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Count@var[]..[]" />
    <Dynamo.Nodes.DSFunction guid="19fb04d3-f853-4524-ae92-35e024ac0a8a" type="Dynamo.Nodes.DSFunction" nickname="List.RemoveItemAtIndex" x="4243.32724881632" y="591.771054488064" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.List.RemoveItemAtIndex@var[]..[],int[]" />
    <DSCoreNodesUI.Input.DoubleSlider guid="d90e7d85-a0be-4127-a089-5ca8fb8398e1" type="DSCoreNodesUI.Input.DoubleSlider" nickname="Number Slider" x="3326.61667996883" y="919.510725381387" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double>4.5</System.Double>
      <Range min="1" max="9" step="0.01" />
    </DSCoreNodesUI.Input.DoubleSlider>
    <Dynamo.Nodes.CodeBlockNodeModel guid="11d1b40a-98b5-4275-b0d9-adb83583a588" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="3511.64816778397" y="820.948365516595" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="x/1.9;" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="4a153b82-3b43-42e2-af1a-f1566c804957" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="4625.10097013753" y="1477.60510939018" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="x-y;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="ba67e1c2-3fbb-4af0-86e8-50b389cbc462" type="Dynamo.Nodes.DSFunction" nickname="Arc.ByCenterPointRadiusAngle" x="4979.71940117217" y="1552.11201596294" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Arc.ByCenterPointRadiusAngle@Autodesk.DesignScript.Geometry.Point,double,double,double,Autodesk.DesignScript.Geometry.Vector" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="e5ae266b-ec5c-4841-bc86-a4f94007c136" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="4735.51929638483" y="1725.40139425911" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="270;" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="984987a2-da80-4f38-b84c-dd75225868ef" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="4743.40772858009" y="1642.63125478482" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="-270;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="54eb5181-0184-42e2-a599-1864a0f703dd" type="Dynamo.Nodes.DSFunction" nickname="Geometry.Intersect" x="5466.17697647915" y="1266.18438721177" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Geometry.Intersect@Autodesk.DesignScript.Geometry.Geometry" />
    <Dynamo.Nodes.DSFunction guid="c199a9af-93a1-4446-bb5f-e68a4640f125" type="Dynamo.Nodes.DSFunction" nickname="Flatten" x="5744.06385689057" y="1726.30767162532" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Flatten@var[]..[]" />
    <Dynamo.Nodes.DSFunction guid="a5c62a95-7f66-4e98-b2e6-0cfa37a1b466" type="Dynamo.Nodes.DSFunction" nickname="Flatten" x="5753.24990026366" y="1622.88226969921" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Flatten@var[]..[]" />
    <Dynamo.Nodes.DSFunction guid="7b98cbab-ebc2-42a6-9eb6-583b916729c8" type="Dynamo.Nodes.DSFunction" nickname="Line.ByStartPointEndPoint" x="5909.37289760504" y="1654.50195868522" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Line.ByStartPointEndPoint@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point" />
    <Dynamo.Nodes.DSFunction guid="aba0f51c-d4cb-4197-a280-83cc5d2d6e10" type="Dynamo.Nodes.DSFunction" nickname="Line.ByStartPointEndPoint" x="6271.45365273741" y="737.396637676664" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Line.ByStartPointEndPoint@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point" />
    <Dynamo.Nodes.DSFunction guid="fca5063d-6f22-42fe-9978-a4666612fb5b" type="Dynamo.Nodes.DSFunction" nickname="Flatten" x="6115.33065539603" y="705.776948690654" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Flatten@var[]..[]" />
    <Dynamo.Nodes.DSFunction guid="f1c877da-13b4-4770-af11-837f08499e7c" type="Dynamo.Nodes.DSFunction" nickname="Flatten" x="6106.14461202294" y="809.202350616764" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Flatten@var[]..[]" />
    <Dynamo.Nodes.DSFunction guid="e6b97b9c-ae72-4be5-80ca-8341b81d9de1" type="Dynamo.Nodes.DSFunction" nickname="Curve.Extrude" x="7373.45265049872" y="692.218578599278" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Curve.Extrude@Autodesk.DesignScript.Geometry.Vector,double">
      <PortInfo index="2" default="True" />
    </Dynamo.Nodes.DSFunction>
    <Dynamo.Nodes.DSFunction guid="afbbaee0-1736-4d9f-8abb-ac7499548f11" type="Dynamo.Nodes.DSFunction" nickname="List.RemoveItemAtIndex" x="7066.55269718045" y="702.118370370316" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.List.RemoveItemAtIndex@var[]..[],int[]" />
    <Dynamo.Nodes.DSFunction guid="c96f5ea8-5c73-4c63-ae87-0b5e70db6c1c" type="Dynamo.Nodes.DSFunction" nickname="Count" x="6700.86831408284" y="754.989590542113" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Count@var[]..[]" />
    <Dynamo.Nodes.DSFunction guid="29b943b5-9f7e-4e78-8e4a-4423025e99b2" type="Dynamo.Nodes.DSFunction" nickname="Flatten" x="6514.3131894752" y="691.6302325746" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Flatten@var[]..[]" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="86b5bad9-5262-40bc-b453-00cdc086184a" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="6862.60298438736" y="801.903736741173" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="x-1;" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="9d7bf394-0e8c-4076-b19b-c861d0b28b73" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="7077.61308940949" y="952.211887509479" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="(x/y)*0.87;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="ff597944-dd25-496b-8e1c-00eb7c3929f6" type="Dynamo.Nodes.DSFunction" nickname="Count" x="6938.98884436651" y="964.356932512659" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Count@var[]..[]" />
    <Dynamo.Nodes.DSFunction guid="c2024d5c-6f91-40a1-bf78-fa3fdd759f49" type="Dynamo.Nodes.DSFunction" nickname="Curve.Extrude" x="7319.31754037932" y="1648.9986177413" isVisible="false" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Curve.Extrude@Autodesk.DesignScript.Geometry.Vector,double">
      <PortInfo index="2" default="True" />
    </Dynamo.Nodes.DSFunction>
    <Dynamo.Nodes.DSFunction guid="83b80d6e-32ee-455c-828f-c70d76d2a6bf" type="Dynamo.Nodes.DSFunction" nickname="List.RemoveItemAtIndex" x="7012.41758706105" y="1658.89840951233" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.List.RemoveItemAtIndex@var[]..[],int[]" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="fa06b89b-70e2-4e2d-bc79-44091813ebb1" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="6808.46787426796" y="1758.68377588319" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="x-1;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="7a44f445-3457-4628-a19d-7ea2f5500702" type="Dynamo.Nodes.DSFunction" nickname="Count" x="6646.73320396344" y="1711.76962968413" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Count@var[]..[]" />
    <Dynamo.Nodes.DSFunction guid="729662ed-7626-4b09-bbda-ec7d2de08504" type="Dynamo.Nodes.DSFunction" nickname="Flatten" x="6460.1780793558" y="1648.41027171662" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="" function="Flatten@var[]..[]" />
    <Dynamo.Nodes.DSFunction guid="b11fbf76-986c-49fe-93b3-3cf0203f1aeb" type="Dynamo.Nodes.DSFunction" nickname="Surface.Thicken" x="7859.06826941907" y="692.114471101245" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Surface.Thicken@double">
      <PortInfo index="1" default="True" />
    </Dynamo.Nodes.DSFunction>
    <Dynamo.Nodes.CodeBlockNodeModel guid="f3f54fb8-ac63-46ef-8678-8a9b273b70ab" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="7744.06578740898" y="748.440049458245" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="-0.25;" ShouldFocus="false" />
    <Dynamo.Nodes.CodeBlockNodeModel guid="60e1947a-1624-450b-8290-5b9be8000439" type="Dynamo.Nodes.CodeBlockNodeModel" nickname="Code Block" x="7782.14858849129" y="1716.27518818701" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="0.25;" ShouldFocus="false" />
    <Dynamo.Nodes.DSFunction guid="832bc0da-f31e-4bab-ba09-54373e2278fd" type="Dynamo.Nodes.DSFunction" nickname="Surface.Thicken" x="7897.15107050138" y="1659.94960983001" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="ProtoGeometry.dll" function="Autodesk.DesignScript.Geometry.Surface.Thicken@double">
      <PortInfo index="1" default="True" />
    </Dynamo.Nodes.DSFunction>
    <Dynamo.Nodes.DSFunction guid="4c946798-13b9-44ef-977c-c2a0fa6cf947" type="Dynamo.Nodes.DSFunction" nickname="ImportInstance.ByGeometry" x="8094.69888095312" y="701.8616360332" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="RevitNodes.dll" function="Revit.Elements.ImportInstance.ByGeometry@Autodesk.DesignScript.Geometry.Geometry" />
    <Dynamo.Nodes.DSFunction guid="88a2d6e3-f593-4553-885a-16592d75fcf8" type="Dynamo.Nodes.DSFunction" nickname="ImportInstance.ByGeometry" x="8188.29213841286" y="1668.2793740674" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="RevitNodes.dll" function="Revit.Elements.ImportInstance.ByGeometry@Autodesk.DesignScript.Geometry.Geometry" />
  </Elements>
  <Connectors>
    <Dynamo.Models.ConnectorModel start="b71b2161-0719-4f03-be61-1e81b39f5aa8" start_index="0" end="e13cfe5b-57bb-4f99-a0ea-beb83b9a161e" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="b71b2161-0719-4f03-be61-1e81b39f5aa8" start_index="0" end="094d7826-370a-4c00-aacf-f9ab6038275f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="f1fe0378-e55f-4398-8520-79a1ec0f7253" start_index="0" end="b71b2161-0719-4f03-be61-1e81b39f5aa8" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="f1fe0378-e55f-4398-8520-79a1ec0f7253" start_index="0" end="e6b97b9c-ae72-4be5-80ca-8341b81d9de1" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="f1fe0378-e55f-4398-8520-79a1ec0f7253" start_index="0" end="c2024d5c-6f91-40a1-bf78-fa3fdd759f49" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="4882d76d-ef81-4207-89b1-931b58addd3a" start_index="0" end="b71b2161-0719-4f03-be61-1e81b39f5aa8" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="4882d76d-ef81-4207-89b1-931b58addd3a" start_index="0" end="54fb4448-cf6f-45f7-bb4f-2fec00117f7a" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="4882d76d-ef81-4207-89b1-931b58addd3a" start_index="0" end="9d7bf394-0e8c-4076-b19b-c861d0b28b73" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="9c6f27b2-c241-4762-b772-d2e90e90a36f" start_index="0" end="b71b2161-0719-4f03-be61-1e81b39f5aa8" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="ab1e4ca7-f2dc-4afc-845d-512ae4020de2" start_index="0" end="9c6f27b2-c241-4762-b772-d2e90e90a36f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="ab1e4ca7-f2dc-4afc-845d-512ae4020de2" start_index="0" end="9c6f27b2-c241-4762-b772-d2e90e90a36f" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="ab1e4ca7-f2dc-4afc-845d-512ae4020de2" start_index="0" end="9c6f27b2-c241-4762-b772-d2e90e90a36f" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="a4dfe319-0c7f-4700-9eaa-67335116a0c4" start_index="0" end="e17457dd-0965-4887-8a08-635170918e65" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="a4dfe319-0c7f-4700-9eaa-67335116a0c4" start_index="0" end="a7d94cb0-11cf-455a-9818-02cb59c248f8" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="a4dfe319-0c7f-4700-9eaa-67335116a0c4" start_index="0" end="f3274b6d-1ce3-443b-b5a7-371c4c71151e" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="a4dfe319-0c7f-4700-9eaa-67335116a0c4" start_index="0" end="ff597944-dd25-496b-8e1c-00eb7c3929f6" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="e13cfe5b-57bb-4f99-a0ea-beb83b9a161e" start_index="0" end="e17457dd-0965-4887-8a08-635170918e65" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="e5c65d66-13bc-41ce-98e5-09e82e18c53b" start_index="0" end="e13cfe5b-57bb-4f99-a0ea-beb83b9a161e" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="54fb4448-cf6f-45f7-bb4f-2fec00117f7a" start_index="0" end="e13cfe5b-57bb-4f99-a0ea-beb83b9a161e" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="54fb4448-cf6f-45f7-bb4f-2fec00117f7a" start_index="0" end="4a153b82-3b43-42e2-af1a-f1566c804957" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="54fb4448-cf6f-45f7-bb4f-2fec00117f7a" start_index="0" end="11d1b40a-98b5-4275-b0d9-adb83583a588" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="e17457dd-0965-4887-8a08-635170918e65" start_index="0" end="3d04b955-0c3d-4210-acd8-07993a2f5b6b" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="ee7be14f-c3f4-4d71-84cb-034964f794b0" start_index="0" end="094d7826-370a-4c00-aacf-f9ab6038275f" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="094d7826-370a-4c00-aacf-f9ab6038275f" start_index="0" end="a7d94cb0-11cf-455a-9818-02cb59c248f8" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="1a091f59-c8cd-4249-a369-3b6bb0cb3745" start_index="0" end="094d7826-370a-4c00-aacf-f9ab6038275f" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="a7d94cb0-11cf-455a-9818-02cb59c248f8" start_index="0" end="b7ddc790-a5f7-47e5-a3f7-72c40ee12441" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="06e420ac-2424-4783-9953-844b88a05d93" start_index="0" end="54eb5181-0184-42e2-a599-1864a0f703dd" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="55b3b1bb-383d-4aff-820d-1d014764385e" start_index="0" end="06e420ac-2424-4783-9953-844b88a05d93" end_index="4" portType="0" />
    <Dynamo.Models.ConnectorModel start="55b3b1bb-383d-4aff-820d-1d014764385e" start_index="0" end="ba67e1c2-3fbb-4af0-86e8-50b389cbc462" end_index="4" portType="0" />
    <Dynamo.Models.ConnectorModel start="b7ddc790-a5f7-47e5-a3f7-72c40ee12441" start_index="0" end="06e420ac-2424-4783-9953-844b88a05d93" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="b7ddc790-a5f7-47e5-a3f7-72c40ee12441" start_index="0" end="f1c877da-13b4-4770-af11-837f08499e7c" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="04561f3d-4d72-4a7b-97a9-3b4f9b5474a2" start_index="0" end="06e420ac-2424-4783-9953-844b88a05d93" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="3d04b955-0c3d-4210-acd8-07993a2f5b6b" start_index="0" end="ba67e1c2-3fbb-4af0-86e8-50b389cbc462" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="3d04b955-0c3d-4210-acd8-07993a2f5b6b" start_index="0" end="c199a9af-93a1-4446-bb5f-e68a4640f125" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="c735c269-2433-49f8-b039-7631aa094880" start_index="0" end="06e420ac-2424-4783-9953-844b88a05d93" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="cb264f58-d454-4e71-b1bd-be618c4deb66" start_index="0" end="98810b1a-7a63-4903-aa91-23654a8a7436" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="cb264f58-d454-4e71-b1bd-be618c4deb66" start_index="0" end="19fb04d3-f853-4524-ae92-35e024ac0a8a" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="fd6119c3-2c60-4a83-96e5-9b502efe95d9" start_index="0" end="cb264f58-d454-4e71-b1bd-be618c4deb66" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="f3274b6d-1ce3-443b-b5a7-371c4c71151e" start_index="0" end="fd6119c3-2c60-4a83-96e5-9b502efe95d9" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="98810b1a-7a63-4903-aa91-23654a8a7436" start_index="0" end="19fb04d3-f853-4524-ae92-35e024ac0a8a" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="19fb04d3-f853-4524-ae92-35e024ac0a8a" start_index="0" end="06e420ac-2424-4783-9953-844b88a05d93" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="19fb04d3-f853-4524-ae92-35e024ac0a8a" start_index="0" end="4a153b82-3b43-42e2-af1a-f1566c804957" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="d90e7d85-a0be-4127-a089-5ca8fb8398e1" start_index="0" end="cb264f58-d454-4e71-b1bd-be618c4deb66" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="11d1b40a-98b5-4275-b0d9-adb83583a588" start_index="0" end="cb264f58-d454-4e71-b1bd-be618c4deb66" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="4a153b82-3b43-42e2-af1a-f1566c804957" start_index="0" end="ba67e1c2-3fbb-4af0-86e8-50b389cbc462" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="ba67e1c2-3fbb-4af0-86e8-50b389cbc462" start_index="0" end="54eb5181-0184-42e2-a599-1864a0f703dd" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="e5ae266b-ec5c-4841-bc86-a4f94007c136" start_index="0" end="ba67e1c2-3fbb-4af0-86e8-50b389cbc462" end_index="3" portType="0" />
    <Dynamo.Models.ConnectorModel start="984987a2-da80-4f38-b84c-dd75225868ef" start_index="0" end="ba67e1c2-3fbb-4af0-86e8-50b389cbc462" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="54eb5181-0184-42e2-a599-1864a0f703dd" start_index="0" end="a5c62a95-7f66-4e98-b2e6-0cfa37a1b466" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="54eb5181-0184-42e2-a599-1864a0f703dd" start_index="0" end="fca5063d-6f22-42fe-9978-a4666612fb5b" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="c199a9af-93a1-4446-bb5f-e68a4640f125" start_index="0" end="7b98cbab-ebc2-42a6-9eb6-583b916729c8" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="a5c62a95-7f66-4e98-b2e6-0cfa37a1b466" start_index="0" end="7b98cbab-ebc2-42a6-9eb6-583b916729c8" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="7b98cbab-ebc2-42a6-9eb6-583b916729c8" start_index="0" end="729662ed-7626-4b09-bbda-ec7d2de08504" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="7b98cbab-ebc2-42a6-9eb6-583b916729c8" start_index="0" end="83b80d6e-32ee-455c-828f-c70d76d2a6bf" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="aba0f51c-d4cb-4197-a280-83cc5d2d6e10" start_index="0" end="29b943b5-9f7e-4e78-8e4a-4423025e99b2" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="fca5063d-6f22-42fe-9978-a4666612fb5b" start_index="0" end="aba0f51c-d4cb-4197-a280-83cc5d2d6e10" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="f1c877da-13b4-4770-af11-837f08499e7c" start_index="0" end="aba0f51c-d4cb-4197-a280-83cc5d2d6e10" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="e6b97b9c-ae72-4be5-80ca-8341b81d9de1" start_index="0" end="b11fbf76-986c-49fe-93b3-3cf0203f1aeb" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="afbbaee0-1736-4d9f-8abb-ac7499548f11" start_index="0" end="e6b97b9c-ae72-4be5-80ca-8341b81d9de1" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="c96f5ea8-5c73-4c63-ae87-0b5e70db6c1c" start_index="0" end="86b5bad9-5262-40bc-b453-00cdc086184a" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="29b943b5-9f7e-4e78-8e4a-4423025e99b2" start_index="0" end="c96f5ea8-5c73-4c63-ae87-0b5e70db6c1c" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="29b943b5-9f7e-4e78-8e4a-4423025e99b2" start_index="0" end="afbbaee0-1736-4d9f-8abb-ac7499548f11" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="86b5bad9-5262-40bc-b453-00cdc086184a" start_index="0" end="afbbaee0-1736-4d9f-8abb-ac7499548f11" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="9d7bf394-0e8c-4076-b19b-c861d0b28b73" start_index="0" end="e6b97b9c-ae72-4be5-80ca-8341b81d9de1" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="9d7bf394-0e8c-4076-b19b-c861d0b28b73" start_index="0" end="c2024d5c-6f91-40a1-bf78-fa3fdd759f49" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="ff597944-dd25-496b-8e1c-00eb7c3929f6" start_index="0" end="9d7bf394-0e8c-4076-b19b-c861d0b28b73" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="c2024d5c-6f91-40a1-bf78-fa3fdd759f49" start_index="0" end="832bc0da-f31e-4bab-ba09-54373e2278fd" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="83b80d6e-32ee-455c-828f-c70d76d2a6bf" start_index="0" end="c2024d5c-6f91-40a1-bf78-fa3fdd759f49" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="fa06b89b-70e2-4e2d-bc79-44091813ebb1" start_index="0" end="83b80d6e-32ee-455c-828f-c70d76d2a6bf" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="7a44f445-3457-4628-a19d-7ea2f5500702" start_index="0" end="fa06b89b-70e2-4e2d-bc79-44091813ebb1" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="729662ed-7626-4b09-bbda-ec7d2de08504" start_index="0" end="7a44f445-3457-4628-a19d-7ea2f5500702" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="b11fbf76-986c-49fe-93b3-3cf0203f1aeb" start_index="0" end="4c946798-13b9-44ef-977c-c2a0fa6cf947" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="f3f54fb8-ac63-46ef-8678-8a9b273b70ab" start_index="0" end="b11fbf76-986c-49fe-93b3-3cf0203f1aeb" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="60e1947a-1624-450b-8290-5b9be8000439" start_index="0" end="832bc0da-f31e-4bab-ba09-54373e2278fd" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="832bc0da-f31e-4bab-ba09-54373e2278fd" start_index="0" end="88a2d6e3-f593-4553-885a-16592d75fcf8" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <SessionTraceData>
    <NodeTraceData NodeId="4c946798-13b9-44ef-977c-c2a0fa6cf947">
      <CallsiteTraceData>PFNPQVAtRU5WOkVudmVsb3BlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOlNPQVAtRU5DPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy9zb2FwL2VuY29kaW5nLyIgeG1sbnM6U09BUC1FTlY9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3NvYXAvZW52ZWxvcGUvIiB4bWxuczpjbHI9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vc29hcC9lbmNvZGluZy9jbHIvMS4wIiBTT0FQLUVOVjplbmNvZGluZ1N0eWxlPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy9zb2FwL2VuY29kaW5nLyI+DQo8U09BUC1FTlY6Qm9keT4NCjxhMTpDYWxsU2l0ZV94MDAyQl9UcmFjZVNlcmlhbGlzZXJIZWxwZXIgaWQ9InJlZi0xIiB4bWxuczphMT0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9jbHIvbnNhc3NlbS9Qcm90b0NvcmUvUHJvdG9Db3JlJTJDJTIwVmVyc2lvbiUzRDAuNy42LjQxOTAlMkMlMjBDdWx0dXJlJTNEbmV1dHJhbCUyQyUyMFB1YmxpY0tleVRva2VuJTNEbnVsbCI+DQo8TnVtYmVyT2ZFbGVtZW50cz4xPC9OdW1iZXJPZkVsZW1lbnRzPg0KPEJhc2UtMF9IYXNEYXRhPnRydWU8L0Jhc2UtMF9IYXNEYXRhPg0KPEJhc2UtMF9EYXRhIGlkPSJyZWYtMyI+UEZOUFFWQXRSVTVXT2tWdWRtVnNiM0JsSUhodGJHNXpPbmh6YVQwaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNUzlZVFV4VFkyaGxiV0V0YVc1emRHRnVZMlVpSUhodGJHNXpPbmh6WkQwaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNUzlZVFV4VFkyaGxiV0VpSUhodGJHNXpPbE5QUVZBdFJVNURQU0pvZEhSd09pOHZjMk5vWlcxaGN5NTRiV3h6YjJGd0xtOXlaeTl6YjJGd0wyVnVZMjlrYVc1bkx5SWdlRzFzYm5NNlUwOUJVQzFGVGxZOUltaDBkSEE2THk5elkyaGxiV0Z6TG5odGJITnZZWEF1YjNKbkwzTnZZWEF2Wlc1MlpXeHZjR1V2SWlCNGJXeHVjenBqYkhJOUltaDBkSEE2THk5elkyaGxiV0Z6TG0xcFkzSnZjMjltZEM1amIyMHZjMjloY0M5bGJtTnZaR2x1Wnk5amJISXZNUzR3SWlCVFQwRlFMVVZPVmpwbGJtTnZaR2x1WjFOMGVXeGxQU0pvZEhSd09pOHZjMk5vWlcxaGN5NTRiV3h6YjJGd0xtOXlaeTl6YjJGd0wyVnVZMjlrYVc1bkx5SStEUW84VTA5QlVDMUZUbFk2UW05a2VUNE5DanhoTVRwVFpYSnBZV3hwZW1GaWJHVkpaQ0JwWkQwaWNtVm1MVEVpSUhodGJHNXpPbUV4UFNKb2RIUndPaTh2YzJOb1pXMWhjeTV0YVdOeWIzTnZablF1WTI5dEwyTnNjaTl1YzJGemMyVnRMMUpsZG1sMFUyVnlkbWxqWlhNdVVHVnljMmx6ZEdWdVkyVXZVbVYyYVhSVFpYSjJhV05sY3lVeVF5VXlNRlpsY25OcGIyNGxNMFF3TGpjdU5pNDBNVGt3SlRKREpUSXdRM1ZzZEhWeVpTVXpSRzVsZFhSeVlXd2xNa01sTWpCUWRXSnNhV05MWlhsVWIydGxiaVV6Ukc1MWJHd2lQZzBLUEhOMGNtbHVaMGxFSUdsa1BTSnlaV1l0TXlJK01HVTVZVE14TXpFdE9HUXhNeTAwWTJRNExXRmhObUV0TnprMllqazFNakZtTldSakxUQXdNRE0xTldJMlBDOXpkSEpwYm1kSlJENE5DanhwYm5SSlJENHlNVGcxTlRBOEwybHVkRWxFUGcwS1BDOWhNVHBUWlhKcFlXeHBlbUZpYkdWSlpENE5Dand2VTA5QlVDMUZUbFk2UW05a2VUNE5Dand2VTA5QlVDMUZUbFk2Ulc1MlpXeHZjR1UrRFFvPTwvQmFzZS0wX0RhdGE+DQo8QmFzZS0wX0hhc05lc3RlZERhdGE+ZmFsc2U8L0Jhc2UtMF9IYXNOZXN0ZWREYXRhPg0KPC9hMTpDYWxsU2l0ZV94MDAyQl9UcmFjZVNlcmlhbGlzZXJIZWxwZXI+DQo8L1NPQVAtRU5WOkJvZHk+DQo8L1NPQVAtRU5WOkVudmVsb3BlPg0K</CallsiteTraceData>
      <CallsiteTraceData></CallsiteTraceData>
    </NodeTraceData>
    <NodeTraceData NodeId="88a2d6e3-f593-4553-885a-16592d75fcf8">
      <CallsiteTraceData>PFNPQVAtRU5WOkVudmVsb3BlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOlNPQVAtRU5DPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy9zb2FwL2VuY29kaW5nLyIgeG1sbnM6U09BUC1FTlY9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3NvYXAvZW52ZWxvcGUvIiB4bWxuczpjbHI9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vc29hcC9lbmNvZGluZy9jbHIvMS4wIiBTT0FQLUVOVjplbmNvZGluZ1N0eWxlPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy9zb2FwL2VuY29kaW5nLyI+DQo8U09BUC1FTlY6Qm9keT4NCjxhMTpDYWxsU2l0ZV94MDAyQl9UcmFjZVNlcmlhbGlzZXJIZWxwZXIgaWQ9InJlZi0xIiB4bWxuczphMT0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9jbHIvbnNhc3NlbS9Qcm90b0NvcmUvUHJvdG9Db3JlJTJDJTIwVmVyc2lvbiUzRDAuNy42LjQxOTAlMkMlMjBDdWx0dXJlJTNEbmV1dHJhbCUyQyUyMFB1YmxpY0tleVRva2VuJTNEbnVsbCI+DQo8TnVtYmVyT2ZFbGVtZW50cz4xPC9OdW1iZXJPZkVsZW1lbnRzPg0KPEJhc2UtMF9IYXNEYXRhPnRydWU8L0Jhc2UtMF9IYXNEYXRhPg0KPEJhc2UtMF9EYXRhIGlkPSJyZWYtMyI+UEZOUFFWQXRSVTVXT2tWdWRtVnNiM0JsSUhodGJHNXpPbmh6YVQwaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNUzlZVFV4VFkyaGxiV0V0YVc1emRHRnVZMlVpSUhodGJHNXpPbmh6WkQwaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNUzlZVFV4VFkyaGxiV0VpSUhodGJHNXpPbE5QUVZBdFJVNURQU0pvZEhSd09pOHZjMk5vWlcxaGN5NTRiV3h6YjJGd0xtOXlaeTl6YjJGd0wyVnVZMjlrYVc1bkx5SWdlRzFzYm5NNlUwOUJVQzFGVGxZOUltaDBkSEE2THk5elkyaGxiV0Z6TG5odGJITnZZWEF1YjNKbkwzTnZZWEF2Wlc1MlpXeHZjR1V2SWlCNGJXeHVjenBqYkhJOUltaDBkSEE2THk5elkyaGxiV0Z6TG0xcFkzSnZjMjltZEM1amIyMHZjMjloY0M5bGJtTnZaR2x1Wnk5amJISXZNUzR3SWlCVFQwRlFMVVZPVmpwbGJtTnZaR2x1WjFOMGVXeGxQU0pvZEhSd09pOHZjMk5vWlcxaGN5NTRiV3h6YjJGd0xtOXlaeTl6YjJGd0wyVnVZMjlrYVc1bkx5SStEUW84VTA5QlVDMUZUbFk2UW05a2VUNE5DanhoTVRwVFpYSnBZV3hwZW1GaWJHVkpaQ0JwWkQwaWNtVm1MVEVpSUhodGJHNXpPbUV4UFNKb2RIUndPaTh2YzJOb1pXMWhjeTV0YVdOeWIzTnZablF1WTI5dEwyTnNjaTl1YzJGemMyVnRMMUpsZG1sMFUyVnlkbWxqWlhNdVVHVnljMmx6ZEdWdVkyVXZVbVYyYVhSVFpYSjJhV05sY3lVeVF5VXlNRlpsY25OcGIyNGxNMFF3TGpjdU5pNDBNVGt3SlRKREpUSXdRM1ZzZEhWeVpTVXpSRzVsZFhSeVlXd2xNa01sTWpCUWRXSnNhV05MWlhsVWIydGxiaVV6Ukc1MWJHd2lQZzBLUEhOMGNtbHVaMGxFSUdsa1BTSnlaV1l0TXlJK01HVTVZVE14TXpFdE9HUXhNeTAwWTJRNExXRmhObUV0TnprMllqazFNakZtTldSakxUQXdNRE0xTm1VeVBDOXpkSEpwYm1kSlJENE5DanhwYm5SSlJENHlNVGc0TlRBOEwybHVkRWxFUGcwS1BDOWhNVHBUWlhKcFlXeHBlbUZpYkdWSlpENE5Dand2VTA5QlVDMUZUbFk2UW05a2VUNE5Dand2VTA5QlVDMUZUbFk2Ulc1MlpXeHZjR1UrRFFvPTwvQmFzZS0wX0RhdGE+DQo8QmFzZS0wX0hhc05lc3RlZERhdGE+ZmFsc2U8L0Jhc2UtMF9IYXNOZXN0ZWREYXRhPg0KPC9hMTpDYWxsU2l0ZV94MDAyQl9UcmFjZVNlcmlhbGlzZXJIZWxwZXI+DQo8L1NPQVAtRU5WOkJvZHk+DQo8L1NPQVAtRU5WOkVudmVsb3BlPg0K</CallsiteTraceData>
      <CallsiteTraceData></CallsiteTraceData>
    </NodeTraceData>
  </SessionTraceData>
</Workspace>